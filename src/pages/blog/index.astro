---
import  { getCollection} from "astro:content";
import { SITE } from "@config";
import Layout from "@layouts/Layout.astro";
import PostCard from "@components/PostCard.astro";
import LinkButton from "@components/LinkButton.astro";
import slugify from "@utils/slugify";
import Tag from "@components/Tag.astro";
import getUniqueTags from "@utils/getUniqueTags";
import getSortedPosts from "@utils/getSortedPosts";
import getPageNumbers from "@utils/getPageNumbers";
import getPostsByTags from "@utils/getPostsByTags";



const allPosts = await getCollection("blog");
const allTags = await getUniqueTags("blog");




const tags = Astro.url.searchParams.getAll('tag');
const pageNum =  parseInt(Astro.url.searchParams.get('page')|| "1" )
const isTags = tags.length > 0
const posts = isTags ? getPostsByTags(allPosts, tags) : allPosts;

const sortedPosts = getSortedPosts(posts);

const totalPages = getPageNumbers(sortedPosts.length);
const numPages = totalPages.length; 
const lastPost = pageNum * SITE.postPerPage;
const startPost = lastPost - SITE.postPerPage;

const paginatedPosts = sortedPosts.slice(startPost, lastPost);

const prev = pageNum > 1 ? "" : "disabled";
const next = pageNum < numPages ? "" : "disabled";

const tagSearchParams = isTags ? tags.map(tag => `tag=${tag}&`).join('') : ''; 







---

<data  id="tag-search-params" value={tagSearchParams}></data>
<Layout title="posts", description="All the articles I've posted." >
  <h1 class="text-2xl tracking-wider sm:text-3xl text-start pt-6" >Tags</h1>
  <ul>
      <template x-for="item in filteredItems" :key="item">
          <li x-text="item"></li>
      </template>
  </ul>
</div>

  <ul class="flex flex-wrap gap-2 p-4">
    {(isTags ? tags : allTags).slice(0, 6).sort((a,b) => a.length - b.length).map((tag) => 
        <Tag name={tag} type="tag" class="pr-8 " />
    )}
    <Tag class="bg-skin-card/20 text-xl rounded-full px-6 *:scale-[1.6] " name="+" type="all" size="lg" >
    </ul>
    <h1 class="text-2xl tracking-wider sm:text-3xl text-start pt-6">Posts</h1>
    <ul id="posts"  class="grid sm:grid-cols-2 place-self-center place-items-center  gap-2">
      {
        paginatedPosts
          .map(
            (post) =>
                <PostCard
                post = {post}
                />
          )
      }
    </ul>

{
  numPages > 1 && (
    <nav class="pagination-wrapper" aria-label="Pagination">
      <LinkButton
        disabled={prev === "disabled"}
        href={`/blog?${tagSearchParams}${pageNum - 1 !== 1 ? "page=" + (pageNum - 1) : ""}`}
        className={`mr-4 select-none ${prev}`}
        ariaLabel="Previous"
      >
        <svg xmlns="http://www.w3.org/2000/svg" class={`${prev}-svg`}>
          <path d="M12.707 17.293 8.414 13H18v-2H8.414l4.293-4.293-1.414-1.414L4.586 12l6.707 6.707z" />
        </svg>
        Prev
      </LinkButton>
      <LinkButton
        disabled={next === "disabled"}
        href={`/blog?${tagSearchParams}&page=${+pageNum + 1}`}
        className={`ml-4 select-none ${next}`}
        ariaLabel="Next"
      >
        Next
        <svg xmlns="http://www.w3.org/2000/svg" class={`${next}-svg`}>
          <path d="m11.293 17.293 1.414 1.414L19.414 12l-6.707-6.707-1.414 1.414L15.586 11H6v2h9.586z" />
        </svg>
      </LinkButton>
    </nav>
  )
}
</Layout>

<style>
.pagination-wrapper {
  @apply mb-8 mt-auto flex justify-center;
}
.disabled {
  @apply pointer-events-none select-none opacity-50 hover:text-skin-base group-hover:fill-skin-base;
}
.disabled-svg {
  @apply group-hover:!fill-skin-base;
}
section{
    @apply justify-self-start  w-full flex flex-col gap-2  
  }
  

    h2 {
      @apply text-xl tracking-wider sm:text-2xl  text-start ;
    }
</style>



<script>
  document.addEventListener("astro:page-load", () => {
    const tags = [...new URLSearchParams(window.location.search).getAll("tag").values()];
    if (tags.length === 0) {
      return 
    }

    const tagsElements = document.querySelectorAll('[aria-type="post-tag"]') as NodeListOf<HTMLElement>;
    tagsElements.forEach(tag => {
      if (tags.includes(tag.dataset.tag as string)) return;
      tag.classList.add("hidden");
    })
    const postsElements = document.querySelectorAll('[aria-type="blog-post"]') as NodeListOf<HTMLElement>;
    type Post = {postTitle:string,postTags:string[], element:HTMLElement}
    const posts: Post[] = [...postsElements].map(post => ({
      postTitle:post.dataset.title as string,
      postTags : (post.dataset.tags as string).split("/"),
      element:post
    }));
  
    function matching(tags:string[], postTags:string[]) {
      return postTags.some(postTag => tags.includes(postTag));
    }
    posts.filter(({postTags}) => !matching(tags, postTags)).forEach(({element}) => {
      element.classList.add("hidden");
    })
    
  })
  // get the difference between the posts and the postsByTags
</script>