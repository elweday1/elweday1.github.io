---
/* @ts-ignore */
import { Icon } from "astro-icon";
import { Technologies } from "../types";

---


<div class="scroller overflow-visible w-full h-full">

  <ul id="tech-stack" class="w-full flex justify-between gap-10  p-5  overflow-scroll" style={{animation: `scroll 140s linear forwards infinite`}}>
    {
      
      Object.values(Technologies).map(({type, name, icon, url})=>{
        return (
          <div class="stackType  flex flex-col group " data-type={type}>
            <div class="contents">
                  <li class="stack group/tech flex flex-col justify-center  gap-5 ">
                    <Icon class="size-14 grid place-self-center cursor-pointer hover:scale-125 transition-all " name={icon} />
                    <a href={url}>
                      <h3 class="h-0  z-[1000] text-xl font-bold place-self-center scale-y-0 group-hover/tech:opacity-100 group-hover/tech:scale-y-100 transition-all text-center">{name}</h3>
                      </a>
                      </li>
              </div>
              </div>
            )
          })
          
        }
        </ul>

      </div>



<style>



.scroller {
  mask: linear-gradient(90deg, transparent, white 20%, white 80%, transparent);
}



</style>

<script>
  document.addEventListener("astro:page-load", ()=> {
    const techStack = document.querySelector("#tech-stack") as HTMLElement;
    if (!techStack) return;
    let paused = false;
    // add a callback to the animation
    techStack.addEventListener("mouseover", ()=>paused = true)
    techStack.addEventListener("mouseout", ()=>paused = false)
    setInterval(()=> {
      if (paused) return;
      techStack.scrollLeft += 2;
    }, 30)



    const callback = (entries: IntersectionObserverEntry[]) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          const newNode = entry.target.cloneNode(true) as HTMLElement;
          techStack.appendChild(newNode);
          myObserver.observe(newNode);
        }
        
      })
    }
  

    const myObserver = new IntersectionObserver(callback, {
      root: techStack,
      rootMargin: '200px',
      threshold: 0.5
    });
    
    [...techStack.children].forEach((el) => {
      
      el.addEventListener("mouseover", () => techStack.style.setProperty("animation-play-state", "paused" )),
      el.addEventListener("mouseout", ()=>techStack.style.setProperty("animation-play-state", "running" ))
      myObserver.observe(el)
    })
    
    techStack.animate({scrollLeft: '500px'}, {duration: 5000, fill: "forwards"})

  })
</script>