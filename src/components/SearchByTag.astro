---
import Tag from "./Tag.astro"
export interface Props {
    tags: string[]
}
const {tags} = Astro.props;
import getUniqueTags from "@utils/getUniqueTags";
const allTags = await getUniqueTags("blog", "projects");

const isTags = tags.length > 0




---
<form method="get" class="grid">

    <ul class="flex flex-wrap gap-2 p-1 ">
        {(isTags ? tags : allTags).sort((a,b) => a.length - b.length).map((tag) => 
        <label for={tag} class="relative">
            <input name={tag} id={tag} type="checkbox" hidden class="peer absolute top-[10px] right-5 rounded-full h-6 w-6  accent-[rgb(var(--color-accent))]"/>
            <Tag name={tag} size="lg" type="category" class="pr-3 w-full peer-checked:ring-2 peer-checked:ring-skin-accent   peer-checked:text-skin-accent peer-checked:[&>*:nth-child(1)]:[&>*:nth-child(1)]:fill-skin-accent  " />
        </label>
        
        )}
    </ul>
    <button type="submit" class=" bg-skin-accent/50 rounded-2xl py-5  px-9 w-40 place-self-center text-lg font-bold m-3"> 
        Search
    </button >

</form>

<script>
    import { navigate } from 'astro:transitions/client';
    import {$items} from "@utils/checksStore"
    document.querySelectorAll("input[type=checkbox]").forEach((input)=>{
        input.addEventListener("change", (e)=>{
          const name = (e.target as HTMLInputElement).name
          $items.toggle(name)
        })
    })
    addEventListener("submit", (e) => {
      e.preventDefault()
      const form = e.target as HTMLFormElement
      const url = new URL(window.location.href)
      const inputs = form.querySelectorAll("input[type=checkbox]") as NodeListOf<HTMLInputElement>
      const tags = [...inputs].filter((input)=>input.checked)
      const path = url.origin + "/search/content?" + tags.map((input)=>'tag='+input.name).join("&")
      navigate(path, {


      })
    })
  </script>