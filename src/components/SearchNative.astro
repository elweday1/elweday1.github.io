---

import { slugifyStr } from "@utils/slugify";
import { getCollection } from "astro:content";
import Datetime from "./Datetime.astro";


const posts = await getCollection("blog");
const projects = await getCollection("projects"); 
const entries = [...posts, ...projects];
import { Icon } from "astro-icon";
---



<section  class="mt-3 flex-grow">
    <label class="relative block">
      <span class="absolute inset-y-0 left-0 flex items-center pl-2 opacity-75">
        <svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true">
          <path d="M19.023 16.977a35.13 35.13 0 0 1-1.367-1.384c-.372-.378-.596-.653-.596-.653l-2.8-1.337A6.962 6.962 0 0 0 16 9c0-3.859-3.14-7-7-7S2 5.141 2 9s3.14 7 7 7c1.763 0 3.37-.66 4.603-1.739l1.337 2.8s.275.224.653.596c.387.363.896.854 1.384 1.367l1.358 1.392.604.646 2.121-2.121-.646-.604c-.379-.372-.885-.866-1.391-1.36zM9 14c-2.757 0-5-2.243-5-5s2.243-5 5-5 5 2.243 5 5-2.243 5-5 5z"></path>
        </svg>
      </span>
      <input
        id="search-input"
        class=" px-[0.75rem] py-[0.32rem] indent-8 w-full justify-self-center bg-skin-card/30 rounded-lg text-md  block border border-skin-fill 
      border-opacity-40 bg-skin-fill 
       placeholder:italic placeholder:text-opacity-75 
      focus:border-skin-accent focus:outline-none"
        placeholder="Search for anything..."
        type="text"
        name="search"
        onchange=""
        autocomplete="off"
        autofocus
      />
    </label>

    <p id="number-of-results" class="text-skin-base/70 p-3">Search results</p>
    <ul id="search-results" class="grid grid-cols-1 gap-4 p-4 overflow-y-auto">
      {
        entries.map(({slug, data, collection}) => {
            const href = `/${collection}/${slug}`
            return (
                <a data-title={slugifyStr(data.title)} href={href} class="bg-skin-fill rounded-lg p-3 flex flex-col">
                  <div class="w-full flex flex-row justify-between">
                    <Datetime relative size="sm" datetime={collection == "blog"? data.pubDatetime : data.startDate} endDate={collection == "blog" ? undefined:data.startDate} class="text-skin-base/70  inline-block scale-75 origin-left" />
                    <div class="w-fit flex gap-1  place-items-center justify-end ">
                      <Icon class="text-skin-base/70 size-4" name={collection == "blog" ? "ant-design:read-outlined" : "ic:baseline-code" }/> 
                      <span class="text-skin-base/70 scale-90">{collection == "blog" ? "Post" : "Project"}</span>
                    </div>
                  </div>
                    <span transition:name={slug}  class="text-skin-accent">{data.title}</span>
                    <div class="inline">
                      <span aria-label="pre" class="" /><span aria-label="match" class="bg-red-500" /><span aria-label="post" class="" />
                    </div>
                </a>
            )
        }
    )}
    </ul>
  </section>
  <script>
  import { slugifyStr } from "@utils/slugify";
  import { getCollection, type  CollectionEntry } from "astro:content";
  // @ts-expect-error
  import removeMd from "remove-markdown"; 
  const posts = await getCollection("blog");
  const projects = await getCollection("projects"); 
  type Entry = CollectionEntry<"blog"> | CollectionEntry<"projects"> 
  const entries = [...posts, ...projects] as Entry[] 
  const entriesCount = entries.length 
    function sentence(s: string, first: boolean) {
      const delimiters = /[.!?,;\n]/g; // Include newline character as a sentence delimiter
      const delimiterPositions = [...s.matchAll(delimiters)].map(match => match.index);
      if (first) {
          const firstDelimiterPosition = delimiterPositions[0];
          return firstDelimiterPosition !== undefined ? s.slice(0, firstDelimiterPosition + 1) : s;
      } else {
          const lastDelimiterPosition = delimiterPositions[delimiterPositions.length - 1];
          return lastDelimiterPosition !== undefined ? s.slice(lastDelimiterPosition + 1) : s;
      }
    }
    function getMatch(entry: Entry, query: string) {
        const blob = [removeMd(entry.body), entry.data.description, entry.data.title].join("\n")
        const start = blob.toLowerCase().indexOf(query.toLowerCase())
        const end = start + query.length
        const windowSize = 120; 
        if (start !== -1) {

          const pre = sentence(blob.slice(start - windowSize, start), false)
          const match = blob.slice(start, end)
          const post = sentence(blob.slice(end, end + windowSize), true)

            return{
                match: [pre, match, post],
                title: slugifyStr(entry.data.title)
            } 
                
        }

    }

    type searchResult =  {
        match: [string, string, string]
        title: string
    }

    const parentElement = document.getElementById("search-results") as HTMLUListElement
    function updateList(searchResults: searchResult[]) {
      let hiddenCount = 0;
        [...parentElement.children].forEach((child: any) => {
            const match = searchResults.find(({title}) => title === child.dataset.title) as searchResult;
            if (!match) {
                child.classList.add("hidden")
                hiddenCount += 1
                return
            }
            child.classList.remove("hidden")
            child.querySelector(`[aria-label='pre']`).textContent = match.match[0]
            child.querySelector(`[aria-label='match']`).textContent = match.match[1]
            child.querySelector(`[aria-label='post']`).textContent = match.match[2]
        });
        
        (document.getElementById("number-of-results") as HTMLParagraphElement).innerText = hiddenCount === entriesCount ? "No results found" : `Showing ${searchResults.length} results`;
    }
    const searchInput = (document.getElementById("search-input") as HTMLInputElement)
    
    
    searchInput.addEventListener("input", (e) => {
        const inputVal = (e.target as HTMLInputElement).value
        const searchResults = entries.map((entry) => getMatch(entry, inputVal)).filter((match) => match !== undefined) as searchResult[];
        updateList(searchResults)
    })

</script>
 