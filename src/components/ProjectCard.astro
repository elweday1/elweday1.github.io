---
import Datetime from "./Datetime.astro";
import type { CollectionEntry } from "astro:content";
import { Icon } from "astro-icon";
import { twMerge } from "tailwind-merge";
import { Technologies } from "@config";
import { Image } from "astro:assets";
import { slugifyStr } from "@utils/slugify";

interface Props {
  project: CollectionEntry<"projects">;
  class?: string;
}

const { project, class: className } = Astro.props;
const { data, slug } = project;
const { title, cover, stack, tags, dateTime, endDate } =
  data;

const strTags = tags.map((tag: string) => slugifyStr(tag)).join("/");
---

<li
  data-item-type="search-item"
  data-slug={slug}
  data-tags={strTags}
  data-title={slug}
  class={twMerge("text-white group aspect-video col-span-2 ", className)}
  transition:name={slug + ":cover"}
>
  <div class="relative overflow-clip rounded-xl">
    <Image
      transition:name={slug + ":image"}
      alt=""
      width={600}
      height={400}
      format="avif"
      src={cover}
      class="aspect-video"
    />
    <div
      class="absolute bottom-0 left-0 h-full w-full bg-gradient-to-b from-transparent from-50% to-gray-800 opacity-100 duration-1000 group-hover:opacity-0"
    />
    <a         href={`/projects/${slug}`}

      class="absolute bottom-0 left-0 flex h-full w-full place-items-end justify-between p-3 text-xl font-bold transition-opacity duration-300 group-hover:opacity-0"
    >
      <div class="flex h-full w-full flex-col justify-end gap-2">
        <div class="origin-bottom-left">
          <Datetime
            datetime={dateTime}
            endDate={endDate}
            size="sm"
            class="my-2 inline-block origin-bottom-left translate-y-2 scale-75 transform text-xs font-extralight"
          />
          <h2 class="text-lg font-bold sm:text-2xl" transition:name={slug}>
            {title}
          </h2>
        </div>
        <div
          class="flex w-full place-content-center place-items-center justify-between"
        >
          <div class="flex justify-stretch gap-2">
            {
              (stack as (keyof typeof Technologies)[]).map(technology => {
                const { name, icon } = Technologies[technology];
                return (
                  <Icon
                    transition:name={slug + ":stack:" + name}
                    class={"sm:size-8"}
                    name={icon}
                  />
                );
              })
            }
          </div>
        </div>
      </div>
    </a>
  </div>
</li>

<style>
  .text-smol {
    font-size: 0.1rem;
  }
</style>
